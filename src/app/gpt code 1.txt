import { Component } from '@angular/core';
import { GoogleTranslateComponent } from "./google-translate/google-translate.component";
import { FetchdataService } from './fetchdata.service';

@Component({
	selector: 'app-root',
	standalone: true,
	imports: [GoogleTranslateComponent],
	template: `
    <button (click)="downloadImage()">Download JSON as Image</button>
  `
})

export class AppComponent {
	jsonData = [
		{ flatno: '1', name: 'John Doe', amount: 25, status: 'Unpaid', date: '2023-10-01' },
		{ flatno: '2', name: 'Jane Smith', amount: 30, status: 'Paid', date: '2023-10-02' }
	];

	private readonly scaleFactor = 1.5;
	private readonly padding = 50;
	private readonly rowHeight = 60;
	private readonly upperMargin = 80;
	private readonly fontFamily = "Trebuchet MS";
	private readonly characterWidth = 14;

	downloadImage() {
		const svgMarkup = this.generateSVGTable();
		const svgBlob = new Blob([svgMarkup], { type: 'image/svg+xml' });
		const url = URL.createObjectURL(svgBlob);

		const img = new Image();
		img.crossOrigin = 'anonymous';
		img.onload = () => this.createCanvasImage(img, url);
		img.src = url;
	}

	private createCanvasImage(img: HTMLImageElement, url: string) {
		const canvas = document.createElement('canvas');
		canvas.width = img.width * this.scaleFactor;
		canvas.height = img.height * this.scaleFactor;
		const ctx = canvas.getContext('2d')!;

		ctx.scale(this.scaleFactor, this.scaleFactor);
		ctx.drawImage(img, 0, 0);
		URL.revokeObjectURL(url);

		const link = document.createElement('a');
		link.href = canvas.toDataURL('image/png', 1.0);
		link.download = 'table.png';
		link.click();
	}

	private generateSVGTable(): string {
		const columnWidths = this.calculateColumnWidths();
		const canvasWidth = columnWidths.reduce((acc, width) => acc + width, this.padding);
		const canvasHeight = this.rowHeight * 20 + this.padding + this.upperMargin;
		const boxWidth = canvasWidth - this.padding;
		const boxHeight = canvasHeight - this.padding - this.upperMargin;

		let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="${canvasWidth}" height="${canvasHeight}">
		<rect width="100%" height="100%" fill="#ffff" />
		<rect width="${boxWidth}" height="${boxHeight}" x="${this.padding / 2}" y="${this.padding / 2 + this.upperMargin}" rx="20" ry="20" fill="white" style="stroke-width:3;stroke:gray" />
		<text x="50%" y="${(this.padding + this.upperMargin) / 2}" alignment-baseline="middle" text-anchor="middle" fill="black" font-weight="550" font-family="${this.fontFamily}" font-size="34">December 2024</text>`;

		// Draw horizontal lines
		for (let i = this.rowHeight; i < this.rowHeight * 20; i += this.rowHeight) {
			svg += `<line x1="${this.padding / 2}" y1="${this.padding / 2 + this.upperMargin + i}" x2="${canvasWidth - this.padding / 2}" y2="${this.padding / 2 + this.upperMargin + i}" style="stroke-width:3;stroke:gray" />`;
		}

		// Draw vertical lines
		let xOffset = columnWidths[0];
		for (let i = 1; i < columnWidths.length; i++) {
			svg += `<line x1="${xOffset}" y1="${this.padding / 2 + this.upperMargin}" x2="${xOffset}" y2="${canvasHeight - this.padding / 2 - this.rowHeight}" style="stroke-width:3;stroke:gray" />`;
			xOffset += columnWidths[i];
		}

		svg += '</svg>';
		return svg;
	}

	private calculateColumnWidths(): number[] {
		const baseWidths = Object.keys(this.jsonData[0]).map(key => key.length * this.characterWidth + this.padding);

		for (const row of this.jsonData) {
			const values = Object.values(row);
			values.forEach((value, i) => {
				baseWidths[i] = Math.max(String(value).length * this.characterWidth + this.padding, baseWidths[i]);
			});
		}
		return baseWidths;
	}
}
