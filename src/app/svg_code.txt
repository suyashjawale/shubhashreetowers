import { Component } from '@angular/core';
import { GoogleTranslateComponent } from "./google-translate/google-translate.component";
import { FetchdataService } from './fetchdata.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [GoogleTranslateComponent],
  template: `
    <button (click)="downloadImage()">Download JSON as Image</button>
  `
})
export class AppComponent {
  jsonData = [
    { flatno: '1', name: 'John Doe John DoeJohn DoeJohn DoeJohn DoeJohn Doe', amount: 25, status: 'Unpaid', date: '2023-10-01' },
    { flatno: '2', name: 'Jane Smith', amount: 30, status: 'Paid', date: '2023-10-02' }
  ];

  downloadImage() {
	const svgMarkup = this.generateSVGTable(this.jsonData);
	const svgBlob = new Blob([svgMarkup], { type: 'image/svg+xml' });
	const url = URL.createObjectURL(svgBlob);
  
	const img = new Image();
	img.onload = () => {
	  const canvas = document.createElement('canvas');
	  canvas.width = img.width;
	  canvas.height = img.height;
	  const ctx = canvas.getContext('2d')!;
	  ctx.drawImage(img, 0, 0);
	  URL.revokeObjectURL(url);
  
	  // Trigger download with higher quality (0 - worst, 1 - best)
	  const link = document.createElement('a');
	  link.href = canvas.toDataURL('image/png', 1.0); // Set quality to 1.0 (highest)
	  link.download = 'table.png';
	  link.click();
	};
	img.src = url;
  }

  generateSVGTable(data: { [key: string]: any }[]): string {
	const headers = Object.keys(data[0]);
	const rowHeight = 40;
	const colWidth = 120;
	const borderWidth = 1; // Adjust this value to control border size (default: 1)
	const width = headers.length * colWidth;
	const height = (data.length + 1) * rowHeight;
  
	let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}">
				<rect width="100%" height="100%" fill="#ffff" />`; // Set background color
  
	// Draw Header row with borders
	headers.forEach((header, colIndex) => {
	  const x = colIndex * colWidth;
	  svg += `<rect x="${x}" y="0" width="${colWidth}" height="${rowHeight}" 
			   fill="#ffff" stroke="#000" stroke-width="0.1%" />`; // Cell background and border
	  svg += `<text x="${x + 10}" y="${rowHeight / 2 + 5}" font-family="Arial" font-size="16" fill="#000" font-weight="bold">${header}</text>`;
	});
  
	// Draw Data rows with borders and conditional background for status
	data.forEach((row, rowIndex) => {
	  headers.forEach((header, colIndex) => {
		const x = colIndex * colWidth;
		const y = (rowIndex + 1) * rowHeight;
  
		// Conditional background for 'status' field
		let cellBackground = '#ffffff';
		if (header === 'status') {
		  cellBackground = row[header] === 'Paid' ? 'green' : 'red'; // Green for Paid, Red for Unpaid
		}
  
		// Draw cell background and border with adjusted stroke-width
		svg += `<rect x="${x}" y="${y}" width="${colWidth}" height="${rowHeight}" 
			   fill="${cellBackground}" stroke="#000" stroke-width="0.1%" />`;
  
		// Add cell text
		svg += `<text x="${x + 10}" y="${y + rowHeight / 2 + 5}" font-family="Arial" font-size="16" fill="#000">${row[header]}</text>`;
	  });
	});
  
	svg += '</svg>';
	return svg;
  }
}
