import { Component } from '@angular/core';
import { GoogleTranslateComponent } from "./google-translate/google-translate.component";
import { FetchdataService } from './fetchdata.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [GoogleTranslateComponent],
  template: `
    <button (click)="downloadImage()">Download JSON as Image</button>
	<svg width="1080" height="1920" xmlns="http://www.w3.org/2000/svg" style="margin:20px"><rect width="100%" height="100%" fill="#fff"/><rect width="1010" height="1850" x="35" y="35" rx="20" ry="20" fill="#fff" style="stroke-width:3;stroke:gray"/><path style="stroke-width:3;stroke:gray" d="M35 190h1010M600 35v155"/><text x="190" y="105" font-weight="bold" font-family="Arial" font-size="50">शुभश्री टॉवर्स</text><text x="190" y="147" font-weight="bold" font-family="Arial" font-size="20">तपोधाम, वारजे, पुणे - ४११०५८</text><text x="639" y="100" font-weight="bold" font-family="Arial" font-size="44">Maintenance</text><text x="639" y="160" font-weight="bold" font-family="Arial" font-size="44">December 2024</text><defs><clipPath id="a"><rect x="48" y="46.5" width="120" height="120" rx="20" ry="20"/></clipPath></defs><image x="48" y="46.5" width="120" height="120" href="building.jpg" clip-path="url(#a)"/><path style="stroke-width:3;stroke:gray" d="M35 250h1010M35 300h1010M35 350h1010M35 400h1010M35 450h1010M35 500h1010M35 550h1010M35 600h1010M35 650h1010M35 700h1010M35 750h1010M35 800h1010M35 850h1010M35 900h1010M35 950h1010M35 1000h1010M35 1050h1010M35 1100h1010M35 1150h1010M35 1200h1010"/></svg>
  `
})
export class AppComponent {
  jsonData = [
    { flatno: '1', name: 'John Doe John DoeJohn DoeJohn DoeJohn DoeJohn Doe', amount: 25, status: 'Unpaid', date: '2023-10-01' },
    { flatno: '2', name: 'Jane Smith', amount: 30, status: 'Paid', date: '2023-10-02' }
  ];

  downloadImage() {
	const svgMarkup = this.generateSVGTable(this.jsonData);
	const svgBlob = new Blob([svgMarkup], { type: 'image/svg+xml' });
	const url = URL.createObjectURL(svgBlob);
  
	const img = new Image();
	img.crossOrigin = 'anonymous';  
	img.onload = () => {
	  const scaleFactor = 1;  // Increase to 2x resolution
	  const canvas = document.createElement('canvas');
	  canvas.width = img.width * scaleFactor;
	  canvas.height = img.height * scaleFactor;
	  const ctx = canvas.getContext('2d')!;
	  
	  // Scale context for high quality
	  ctx.scale(scaleFactor, scaleFactor);
	  ctx.drawImage(img, 0, 0);
	  URL.revokeObjectURL(url);
  
	  // Download with higher quality
	  const link = document.createElement('a');
	  link.href = canvas.toDataURL('image/png', 1.0); // Quality set to 1 (highest)
	  link.download = 'table.png';
	  link.click();
	};
	img.src = url;
  }
  

  generateSVGTable(data: { [key: string]: any }[]): string {
	const headers = Object.keys(data[0]);
	const rowHeight = 40;
	const colWidth = 120;
	const borderWidth = 1; // Adjust this value to control border size (default: 1)
	const width = headers.length * colWidth;
	const height = (data.length + 1) * rowHeight;
  
	let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}">
				<rect width="100%" height="100%" fill="#ffff" />`; // Set background color
  
	// Draw Header row with borders
	headers.forEach((header, colIndex) => {
	  const x = colIndex * colWidth;
	  svg += `<rect x="${x}" y="0" width="${colWidth}" height="${rowHeight}" 
			   fill="#ffff" stroke="#000" stroke-width="0.1%" />`; // Cell background and border
	  svg += `<text x="${x + 10}" y="${rowHeight / 2 + 5}" font-family="Arial" font-size="16" fill="#000" font-weight="bold">${header}</text>`;
	});
  
	// Draw Data rows with borders and conditional background for status
	data.forEach((row, rowIndex) => {
	  headers.forEach((header, colIndex) => {
		const x = colIndex * colWidth;
		const y = (rowIndex + 1) * rowHeight;
  
		// Conditional background for 'status' field
		let cellBackground = '#ffffff';
		if (header === 'status') {
		  cellBackground = row[header] === 'Paid' ? 'green' : 'red'; // Green for Paid, Red for Unpaid
		}
  
		// Draw cell background and border with adjusted stroke-width
		svg += `<rect x="${x}" y="${y}" width="${colWidth}" height="${rowHeight}" 
			   fill="${cellBackground}" stroke="#000" stroke-width="0.1%" />`;
  
		// Add cell text
		svg += `<text x="${x + 10}" y="${y + rowHeight / 2 + 5}" font-family="Arial" font-size="16" fill="#000">${row[header]}</text>`;
	  });
	});
  
	svg += '</svg>';

	return svg;

  }
}
